/* eslint-disable react-hooks/rules-of-hooks */
import type { Task } from "@prisma/client";
import type { GetServerSidePropsContext, NextPage } from "next";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import NewTaskModal from "../components/NewTaskModal";
import TasksItem from "../components/TasksItem";
import { api } from "../utils/api";

const tasks: NextPage = () => {
  const { data: session } = useSession();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [completedTasks, setCompletedTasks] = useState<Task[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [sort, setSort] = useState<"completed" | "importance" | "recent">(
    "completed"
  );

  const { data: tasksData, isLoading } = api.task.getTasks.useQuery(undefined, {
    onSuccess(tasks: Task[]) {
      setTasks(tasks);
      const completed = tasks.filter((item) => item.completed);
      setCompletedTasks(completed);
    },
  });

  const toggleModal = () => setIsModalOpen(!isModalOpen);

  if (session) {
    return (
      <>
        <Head>
          <title>YouDoIt | Tasks</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {isModalOpen && (
          <NewTaskModal toggleModal={toggleModal} setTasks={setTasks} />
        )}

        <main className="flex h-fit min-h-screen flex-col items-center justify-center gap-8 bg-danube-200 py-8">
          <div className="min:h-5/6 mt-8 h-fit w-4/5 max-w-5xl rounded-xl bg-white px-4 pt-4 pb-8 shadow-lg shadow-black/50 sm:px-6 xl:mt-0">
            <div className="flex h-10 items-center justify-between">
              <h1 className="text-xl font-bold text-danube-900 sm:text-2xl">
                Your tasks
              </h1>
              <button
                onClick={toggleModal}
                className={`${
                  !isModalOpen ? "z-10" : "z-0"
                } rounded-lg bg-danube-500 px-4 py-2 font-semibold text-white transition hover:bg-danube-600 active:bg-danube-700 sm:px-6`}
              >
                Add task
              </button>
            </div>

            <div className="mt-4 flex gap-1 px-1 text-sm sm:text-lg">
              <span className="font-bold text-danube-800">Sort by: </span>
              <div className="flex items-center gap-1 font-medium text-danube-600">
                <button
                  onClick={() => setSort("completed")}
                  className={
                    sort === "completed" ? "font-semibold text-danube-900" : ""
                  }
                >
                  completed
                </button>
                <button
                  onClick={() => setSort("importance")}
                  className={
                    sort === "importance" ? "font-semibold text-danube-900" : ""
                  }
                >
                  importance
                </button>
                <button
                  onClick={() => setSort("recent")}
                  className={
                    sort === "recent" ? "font-semibold text-danube-900" : ""
                  }
                >
                  recent
                </button>
              </div>
            </div>

            {!tasksData || isLoading ? (
              <h1 className="absolute inset-0 flex items-center justify-center text-xl">
                Loading tasks...
              </h1>
            ) : tasks.length === 0 ? (
              <h1 className="absolute inset-0 flex items-center justify-center text-xl">
                Your task list is empty.
              </h1>
            ) : sort === "completed" ? (
              <ul className="mt-8 flex h-5/6 w-full flex-col gap-2 overflow-x-hidden overflow-y-scroll px-2 text-lg font-medium">
                {tasks
                  .sort((a, b) => Number(b.completed) - Number(a.completed))
                  .map((task) => (
                    <TasksItem
                      key={task.id}
                      task={task}
                      setTasks={setTasks}
                      completedTasks={completedTasks}
                      setCompletedTasks={setCompletedTasks}
                    />
                  ))}
              </ul>
            ) : sort === "importance" ? (
              <ul className="mt-8 flex h-5/6 w-full flex-col gap-2 overflow-x-hidden overflow-y-scroll px-2 text-lg font-medium">
                {tasks
                  .sort((a, b) => Number(b.important) - Number(a.important))
                  .map((task) => (
                    <TasksItem
                      key={task.id}
                      task={task}
                      setTasks={setTasks}
                      completedTasks={completedTasks}
                      setCompletedTasks={setCompletedTasks}
                    />
                  ))}
              </ul>
            ) : (
              sort === "recent" && (
                <ul className="mt-8 flex h-5/6 w-full flex-col gap-2 overflow-x-hidden overflow-y-scroll px-2 text-lg font-medium">
                  {tasks
                    .sort((a, b) => {
                      return b.createdAt.getTime() - a.createdAt.getTime();
                    })
                    .map((task) => (
                      <TasksItem
                        key={task.id}
                        task={task}
                        setTasks={setTasks}
                        completedTasks={completedTasks}
                        setCompletedTasks={setCompletedTasks}
                      />
                    ))}
                </ul>
              )
            )}
          </div>
        </main>
      </>
    );
  }
  return <p>Must be signed in</p>;
};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};

export default tasks;
